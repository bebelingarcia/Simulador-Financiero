{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOGNr6hktky+1bmqnWhENuQ",
      "include_colab_link": True
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/bebelingarcia/Simulador-Financiero/blob/main/app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WLrtm5uQ3qMi",
        "outputId": "668b2ed4-2bf7-4d56-a017-0b214046901a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "13700.866634156246"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ],
      "source": [
        "#A) Simulador de Ahorro con Interés Compuesto (Pagaré Bancario)\n",
        "# Función para calcular el monto final con interés compuesto\n",
        "def interes_compuesto(P, r, n, t):\n",
        "    M = P * (1 + r/n) ** (n * t)\n",
        "    return M\n",
        "\n",
        "# Ejemplo de uso:\n",
        "P = 10000  # Monto inicial\n",
        "r = 0.065  # Tasa de interés anual del 6.5%\n",
        "n = 1  # Interés compuesto anual\n",
        "t = 5  # 5 años\n",
        "\n",
        "monto_final = interes_compuesto(P, r, n, t)\n",
        "monto_final"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Función para calcular el pago mensual de un préstamo\n",
        "def pago_prestamo(P, r, n):\n",
        "    A = P * (r * (1 + r) ** n) / ((1 + r) ** n - 1)\n",
        "    return A\n",
        "\n",
        "# Ejemplo de uso:\n",
        "P_prestamo = 20000  # Monto del préstamo\n",
        "r_mensual = 0.065 / 12  # Tasa de interés mensual\n",
        "n_pagos = 60  # 5 años de pagos mensuales\n",
        "\n",
        "pago_mensual = pago_prestamo(P_prestamo, r_mensual, n_pagos)\n",
        "pago_mensual"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vQhICao636s2",
        "outputId": "4c4fc147-ebac-46c2-e7aa-05b9e783da1d"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "391.32296437457336"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Simulador de Afores y Siefore basado en rendimiento promedio de 5 años\n",
        "def rendimiento_siefore(monto, rendimiento_promedio, años):\n",
        "    monto_final = monto * (1 + rendimiento_promedio) ** años\n",
        "    return monto_final\n",
        "\n",
        "# Ejemplo de uso:\n",
        "monto_inicial = 50000  # Monto inicial del usuario\n",
        "rendimiento_promedio_siefore = 0.05  # 5% de rendimiento anual\n",
        "años = 20  # 20 años hasta el retiro\n",
        "\n",
        "monto_final_siefore = rendimiento_siefore(monto_inicial, rendimiento_promedio_siefore, años)\n",
        "monto_final_siefore"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QODCzPW-37xi",
        "outputId": "d07b5658-a473-4ea7-880d-de82e33ee1ee"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "132664.88525722112"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import yfinance as yf\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Empresas tecnológicas en BMV y BIVA\n",
        "empresas_bmv = ['AMX.MX', 'TLEVISACPO.MX', 'KOFUBL.MX', 'GFNORTEO.MX']  # Empresas en la Bolsa Mexicana\n",
        "empresas_biva = ['CEMEX.MX', 'SOFTTEK.MX', 'ALSEA.MX', 'VITRO.MX']  # Empresas en la Bolsa Institucional de Valores\n",
        "\n",
        "# Fechas de análisis de los últimos 5 años\n",
        "inicio = '2019-01-01'\n",
        "fin = '2024-01-01'\n",
        "\n",
        "# Graficar acciones de BMV y BIVA\n",
        "plt.figure(figsize=(14, 7))\n",
        "\n",
        "# Graficar acciones de BMV\n",
        "for accion in empresas_bmv:\n",
        "    try:\n",
        "        datos_bmv = yf.download(accion, start=inicio, end=fin)['Close']\n",
        "        plt.plot(datos_bmv, label=f'BMV - {accion}')\n",
        "    except Exception as e:\n",
        "        print(f\"No se pudieron obtener los datos para {accion} de BMV: {e}\")\n",
        "\n",
        "# Graficar acciones de BIVA\n",
        "for accion in empresas_biva:\n",
        "    try:\n",
        "        datos_biva = yf.download(accion, start=inicio, end=fin)['Close']\n",
        "        plt.plot(datos_biva, label=f'BIVA - {accion}')\n",
        "    except Exception as e:\n",
        "        print(f\"No se pudieron obtener los datos para {accion} de BIVA: {e}\")\n",
        "\n",
        "# Agregar título y etiquetas a la gráfica\n",
        "plt.title('Comparativa de Acciones (BMV vs BIVA)')\n",
        "plt.xlabel('Fecha')\n",
        "plt.ylabel('Precio de Cierre (MXN)')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "\n",
        "# Mostrar la gráfica\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 988
        },
        "id": "CiO4pSIw-Mbp",
        "outputId": "cedd25b6-9685-4dfe-90d0-908000a38c24"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r[*********************100%***********************]  1 of 1 completed\n",
            "ERROR:yfinance:\n",
            "1 Failed download:\n",
            "ERROR:yfinance:['AMX.MX']: YFTzMissingError('$%ticker%: possibly delisted; no timezone found')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "ERROR:yfinance:\n",
            "1 Failed download:\n",
            "ERROR:yfinance:['CEMEX.MX']: YFTzMissingError('$%ticker%: possibly delisted; no timezone found')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "ERROR:yfinance:\n",
            "1 Failed download:\n",
            "ERROR:yfinance:['SOFTTEK.MX']: YFTzMissingError('$%ticker%: possibly delisted; no timezone found')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "ERROR:yfinance:\n",
            "1 Failed download:\n",
            "ERROR:yfinance:['VITRO.MX']: YFTzMissingError('$%ticker%: possibly delisted; no timezone found')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install streamlit\n",
        "!pip install pyngrok"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1VZsmyoMfTWx",
        "outputId": "96679163-460d-4a19-d865-19059452f684"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: streamlit in /usr/local/lib/python3.10/dist-packages (1.40.1)\n",
            "Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (4.2.2)\n",
            "Requirement already satisfied: blinker<2,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (8.1.7)\n",
            "Requirement already satisfied: numpy<3,>=1.20 in /usr/local/lib/python3.10/dist-packages (from streamlit) (1.26.4)\n",
            "Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.10/dist-packages (from streamlit) (24.2)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (11.0.0)\n",
            "Requirement already satisfied: protobuf<6,>=3.20 in /usr/local/lib/python3.10/dist-packages (from streamlit) (4.25.5)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (17.0.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.10/dist-packages (from streamlit) (2.32.3)\n",
            "Requirement already satisfied: rich<14,>=10.14.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (13.9.4)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (9.0.0)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.10/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (4.12.2)\n",
            "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.10/dist-packages (from streamlit) (3.1.43)\n",
            "Requirement already satisfied: pydeck<1,>=0.8.0b4 in /usr/local/lib/python3.10/dist-packages (from streamlit) (0.9.1)\n",
            "Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.10/dist-packages (from streamlit) (6.3.3)\n",
            "Requirement already satisfied: watchdog<7,>=2.1.5 in /usr/local/lib/python3.10/dist-packages (from streamlit) (6.0.0)\n",
            "Requirement already satisfied: entrypoints in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (0.4)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (3.1.4)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n",
            "Requirement already satisfied: toolz in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (0.12.1)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.11)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3,>=1.4.0->streamlit) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas<3,>=1.4.0->streamlit) (2024.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (2024.8.30)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich<14,>=10.14.0->streamlit) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich<14,>=10.14.0->streamlit) (2.18.0)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (24.2.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2024.10.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.35.1)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.21.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich<14,>=10.14.0->streamlit) (0.1.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.16.0)\n",
            "Requirement already satisfied: pyngrok in /usr/local/lib/python3.10/dist-packages (7.2.1)\n",
            "Requirement already satisfied: PyYAML>=5.1 in /usr/local/lib/python3.10/dist-packages (from pyngrok) (6.0.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!ngrok config add-authtoken 2pJ9cy08hFGITaH8d6Yj3WM7KhC_Jv1HZjcPThVQtjBw9BJ5"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "791Z51DXgUD0",
        "outputId": "2b7b02bd-155c-43e7-804a-0a3921bff0eb"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Authtoken saved to configuration file: /root/.config/ngrok/ngrok.yml\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import streamlit as st\n",
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Títulos de la app\n",
        "st.title('Simulador Financiero')\n",
        "\n",
        "# Sección 1: Simulador Bancario\n",
        "st.header('Simulador Bancario: Ahorro, Préstamo e Inversión')\n",
        "\n",
        "# Formulario de Ahorro\n",
        "st.subheader('Simulador de Ahorro')\n",
        "tasa_ahorro = st.number_input('Tasa de interés anual del ahorro (%)', min_value=0.0, max_value=100.0, value=5.0)\n",
        "monto_inicial = st.number_input('Monto inicial (MXN)', min_value=0.0, value=1000.0)\n",
        "anios_ahorro = st.number_input('Años de ahorro', min_value=1, max_value=50, value=5)\n",
        "\n",
        "# Cálculo del ahorro compuesto\n",
        "ahorro_final = monto_inicial * (1 + tasa_ahorro/100) ** anios_ahorro\n",
        "st.write(f'El monto final después de {anios_ahorro} años será: {ahorro_final:.2f} MXN')\n",
        "\n",
        "# Sección 2: Simulador de Préstamo\n",
        "st.subheader('Simulador de Préstamo')\n",
        "monto_prestamo = st.number_input('Monto del préstamo (MXN)', min_value=0.0, value=5000.0)\n",
        "tasa_prestamo = st.number_input('Tasa de interés anual del préstamo (%)', min_value=0.0, max_value=100.0, value=10.0)\n",
        "anios_prestamo = st.number_input('Años de préstamo', min_value=1, max_value=30, value=5)\n",
        "\n",
        "# Cálculo de la amortización\n",
        "num_pagos = anios_prestamo * 12  # Pagos mensuales\n",
        "tasa_mensual = tasa_prestamo / 100 / 12\n",
        "pago_mensual = monto_prestamo * tasa_mensual / (1 - (1 + tasa_mensual) ** -num_pagos)\n",
        "\n",
        "# Mostrar detalle de pagos\n",
        "st.write(f'Pago mensual: {pago_mensual:.2f} MXN')\n",
        "\n",
        "# Amortización\n",
        "amortizacion = []\n",
        "saldo_pendiente = monto_prestamo\n",
        "for i in range(num_pagos):\n",
        "    interes = saldo_pendiente * tasa_mensual\n",
        "    principal = pago_mensual - interes\n",
        "    saldo_pendiente -= principal\n",
        "    amortizacion.append([i+1, principal, interes, saldo_pendiente])\n",
        "\n",
        "df_amortizacion = pd.DataFrame(amortizacion, columns=['Mes', 'Principal', 'Interés', 'Saldo Pendiente'])\n",
        "st.write(df_amortizacion)\n",
        "\n",
        "# Sección 3: Simulador de Inversión\n",
        "st.subheader('Simulador de Inversión en CETES')\n",
        "monto_inversion = st.number_input('Monto de la inversión (MXN)', min_value=0.0, value=5000.0)\n",
        "tasa_inversion = st.number_input('Tasa de inversión CETES anual (%)', min_value=0.0, max_value=100.0, value=7.0)\n",
        "anios_inversion = st.number_input('Años de inversión', min_value=1, max_value=50, value=5)\n",
        "\n",
        "# Cálculo de inversión CETES\n",
        "inversion_final = monto_inversion * (1 + tasa_inversion/100) ** anios_inversion\n",
        "st.write(f'El monto final después de {anios_inversion} años será: {inversion_final:.2f} MXN')\n",
        "\n",
        "# Sección 4: Simulador de Afore y Siefore\n",
        "st.header('Simulador Afore y Siefore')\n",
        "\n",
        "# Aquí incluirías el rendimiento promedio de las Siefores con datos reales\n",
        "# Para fines de este ejemplo, usaremos valores ficticios de rendimiento\n",
        "rendimiento_afores = {\n",
        "    'Afore 1': 6.5,\n",
        "    'Afore 2': 7.2,\n",
        "    'Afore 3': 5.8,\n",
        "}\n",
        "\n",
        "# Mostrar la mejor opción de Afore\n",
        "afores_opciones = st.selectbox('Selecciona tu Afore', list(rendimiento_afores.keys()))\n",
        "st.write(f'La tasa de rendimiento promedio de {afores_opciones} es: {rendimiento_afores[afores_opciones]}%')\n",
        "\n",
        "# Sección 5: Simulador Bursátil\n",
        "st.header('Simulador Bursátil: Comparativo de Acciones')\n",
        "\n",
        "# Selección de empresas para el comparativo\n",
        "empresas_bmv = ['AMX.MX', 'TLEVISACPO.MX', 'KOFUBL.MX', 'GFNORTEO.MX']  # Empresas en la Bolsa Mexicana\n",
        "empresas_biva = ['CEMEX.MX', 'SOFTTEK.MX', 'ALSEA.MX', 'VITRO.MX']  # Empresas en la Bolsa Institucional de Valores\n",
        "\n",
        "# Fechas de análisis\n",
        "inicio = '2019-01-01'\n",
        "fin = '2024-01-01'\n",
        "\n",
        "# Graficar acciones de BMV y BIVA\n",
        "st.subheader('Comparativa de Acciones (BMV vs BIVA)')\n",
        "plt.figure(figsize=(14, 7))\n",
        "\n",
        "# Graficar acciones de BMV\n",
        "for accion in empresas_bmv:\n",
        "    try:\n",
        "        datos_bmv = yf.download(accion, start=inicio, end=fin)['Close']\n",
        "        plt.plot(datos_bmv, label=f'BMV - {accion}')\n",
        "    except Exception as e:\n",
        "        st.error(f\"No se pudieron obtener los datos para {accion} de BMV: {e}\")\n",
        "\n",
        "# Graficar acciones de BIVA\n",
        "for accion in empresas_biva:\n",
        "    try:\n",
        "        datos_biva = yf.download(accion, start=inicio, end=fin)['Close']\n",
        "        plt.plot(datos_biva, label=f'BIVA - {accion}')\n",
        "    except Exception as e:\n",
        "        st.error(f\"No se pudieron obtener los datos para {accion} de BIVA: {e}\")\n",
        "\n",
        "# Agregar título y etiquetas a la gráfica\n",
        "plt.title('Comparativa de Acciones (BMV vs BIVA)')\n",
        "plt.xlabel('Fecha')\n",
        "plt.ylabel('Precio de Cierre (MXN)')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "\n",
        "# Mostrar la gráfica\n",
        "st.pyplot(plt)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pjDn55MUhtxy",
        "outputId": "9c850e86-ce97-40ab-8e36-ac4ab9519ec9"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2024-11-25 01:55:01.519 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.525 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.530 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.535 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.540 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.542 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.547 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.551 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.553 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.557 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.560 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.564 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.567 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.570 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.574 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.577 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.581 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.584 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.588 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.592 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.595 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.599 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.603 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.605 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.610 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.611 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.615 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.616 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.619 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.621 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.623 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.625 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.627 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.629 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.631 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.634 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.636 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.637 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.642 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.643 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.645 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.654 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.655 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.659 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.660 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.662 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.663 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.667 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.669 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.670 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.671 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.676 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.682 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.683 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.686 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.688 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.690 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.693 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.703 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.706 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.719 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.730 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.760 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.786 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.787 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.788 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.791 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.793 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.794 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.796 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.797 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.798 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.800 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.801 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.803 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.805 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.809 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.812 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.833 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.836 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.837 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.839 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.842 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.848 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.852 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.853 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.854 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.856 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.858 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.860 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.862 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.864 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.866 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:01.869 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "ERROR:yfinance:\n",
            "1 Failed download:\n",
            "ERROR:yfinance:['AMX.MX']: YFTzMissingError('$%ticker%: possibly delisted; no timezone found')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "ERROR:yfinance:\n",
            "1 Failed download:\n",
            "ERROR:yfinance:['CEMEX.MX']: YFTzMissingError('$%ticker%: possibly delisted; no timezone found')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "ERROR:yfinance:\n",
            "1 Failed download:\n",
            "ERROR:yfinance:['SOFTTEK.MX']: YFTzMissingError('$%ticker%: possibly delisted; no timezone found')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "ERROR:yfinance:\n",
            "1 Failed download:\n",
            "ERROR:yfinance:['VITRO.MX']: YFTzMissingError('$%ticker%: possibly delisted; no timezone found')\n",
            "2024-11-25 01:55:02.913 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:06.088 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 01:55:06.091 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DeltaGenerator()"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install streamlit\n",
        "!pip install pyngrok"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u4_G_9hZAvP4",
        "outputId": "b7346b42-56ea-42c6-dfb3-d5ab4945ecb6"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: streamlit in /usr/local/lib/python3.10/dist-packages (1.40.1)\n",
            "Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (4.2.2)\n",
            "Requirement already satisfied: blinker<2,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (8.1.7)\n",
            "Requirement already satisfied: numpy<3,>=1.20 in /usr/local/lib/python3.10/dist-packages (from streamlit) (1.26.4)\n",
            "Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.10/dist-packages (from streamlit) (24.2)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (11.0.0)\n",
            "Requirement already satisfied: protobuf<6,>=3.20 in /usr/local/lib/python3.10/dist-packages (from streamlit) (4.25.5)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (17.0.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.10/dist-packages (from streamlit) (2.32.3)\n",
            "Requirement already satisfied: rich<14,>=10.14.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (13.9.4)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (9.0.0)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.10/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (4.12.2)\n",
            "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.10/dist-packages (from streamlit) (3.1.43)\n",
            "Requirement already satisfied: pydeck<1,>=0.8.0b4 in /usr/local/lib/python3.10/dist-packages (from streamlit) (0.9.1)\n",
            "Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.10/dist-packages (from streamlit) (6.3.3)\n",
            "Requirement already satisfied: watchdog<7,>=2.1.5 in /usr/local/lib/python3.10/dist-packages (from streamlit) (6.0.0)\n",
            "Requirement already satisfied: entrypoints in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (0.4)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (3.1.4)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n",
            "Requirement already satisfied: toolz in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (0.12.1)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.11)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3,>=1.4.0->streamlit) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas<3,>=1.4.0->streamlit) (2024.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (2024.8.30)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich<14,>=10.14.0->streamlit) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich<14,>=10.14.0->streamlit) (2.18.0)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (24.2.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2024.10.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.35.1)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.21.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich<14,>=10.14.0->streamlit) (0.1.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.16.0)\n",
            "Requirement already satisfied: pyngrok in /usr/local/lib/python3.10/dist-packages (7.2.1)\n",
            "Requirement already satisfied: PyYAML>=5.1 in /usr/local/lib/python3.10/dist-packages (from pyngrok) (6.0.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile app.py\n",
        "import streamlit as st\n",
        "\n",
        "def mostrar_simulador():\n",
        "    st.title('Simulador Financiero')\n",
        "\n",
        "    # Ejemplo de cómo crear la interfaz de usuario para el simulador\n",
        "    st.header('Simulador de Ahorro, Préstamo e Inversión')\n",
        "    st.write('Aquí puedes calcular el ahorro, préstamo e inversión utilizando tasas de referencia.')\n",
        "\n",
        "    # Inputs para las simulaciones (esto es solo un ejemplo)\n",
        "    cantidad = st.number_input('Cantidad a invertir ($):', min_value=1, step=1)\n",
        "    tiempo = st.number_input('Tiempo (años):', min_value=1, step=1)\n",
        "    tasa = st.number_input('Tasa de interés anual (%):', min_value=0.1, max_value=100.0, step=0.1)\n",
        "\n",
        "    if st.button('Calcular'):\n",
        "        st.write(f\"Tu inversión de {cantidad} durante {tiempo} años con una tasa de {tasa}% te dará un rendimiento de...\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    mostrar_simulador()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nlui2TrlCDQ0",
        "outputId": "2347a366-e133-41cb-c4bc-1f486bb1b5ec"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing app.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pyngrok import ngrok\n",
        "\n",
        "# Conecta el túnel HTTP para Streamlit en el puerto 8501\n",
        "public_url = ngrok.connect(8501)\n",
        "print(f\"Tu aplicación Streamlit está disponible en: {public_url}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pyp3V13SCJob",
        "outputId": "ebcfb92b-12df-430e-c52b-a8dc8fecf5ce"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tu aplicación Streamlit está disponible en: NgrokTunnel: \"https://6072-34-139-207-112.ngrok-free.app\" -> \"http://localhost:8501\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!streamlit run app.py &>/content/logs.txt &"
      ],
      "metadata": {
        "id": "8a1u1Mu1CVUB"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!cat /content/logs.txt"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ab4eKAkxCm6o",
        "outputId": "f152cc6a-d3a8-4506-9aec-112cd7de6102"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Collecting usage statistics. To deactivate, set browser.gatherUsageStats to false.\n",
            "\n",
            "\n",
            "  You can now view your Streamlit app in your browser.\n",
            "\n",
            "  Local URL: http://localhost:8501\n",
            "  Network URL: http://172.28.0.12:8501\n",
            "  External URL: http://34.139.207.112:8501\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"Tu aplicación Streamlit está disponible en: {public_url}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iP8F2Et3C0Rz",
        "outputId": "8a00f6ba-1934-41a3-b66c-9fb954de9240"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tu aplicación Streamlit está disponible en: NgrokTunnel: \"https://6072-34-139-207-112.ngrok-free.app\" -> \"http://localhost:8501\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import streamlit as st\n",
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Funciones de cálculo\n",
        "def interes_compuesto(P, r, n, t):\n",
        "    return P * (1 + r/n) ** (n * t)\n",
        "\n",
        "def pago_prestamo(P, r, n):\n",
        "    return P * (r * (1 + r) ** n) / ((1 + r) ** n - 1)\n",
        "\n",
        "def rendimiento_siefore(monto, rendimiento_promedio, años):\n",
        "    return monto * (1 + rendimiento_promedio) ** años\n",
        "\n",
        "# Título de la app\n",
        "st.title('Simulador Financiero')\n",
        "\n",
        "# Menú de selección de tipo de simulador\n",
        "simulador = st.selectbox('Selecciona el tipo de simulador', ['Ahorro', 'Préstamo', 'Afore', 'Bursátil'])\n",
        "\n",
        "# Sección de simulador de ahorro\n",
        "if simulador == 'Ahorro':\n",
        "    st.header('Simulador de Ahorro')\n",
        "    monto_inicial = st.number_input('Monto inicial (MXN)', min_value=0.0, value=1000.0)\n",
        "    tasa_ahorro = st.number_input('Tasa de interés anual (%)', min_value=0.0, max_value=100.0, value=5.0)\n",
        "    anios_ahorro = st.number_input('Años de ahorro', min_value=1, max_value=50, value=5)\n",
        "\n",
        "    # Cálculo del ahorro\n",
        "    ahorro_final = monto_inicial * (1 + tasa_ahorro/100) ** anios_ahorro\n",
        "    st.write(f'El monto final después de {anios_ahorro} años será: {ahorro_final:.2f} MXN')\n",
        "\n",
        "# Sección de simulador de préstamo\n",
        "elif simulador == 'Préstamo':\n",
        "    st.header('Simulador de Préstamo')\n",
        "    monto_prestamo = st.number_input('Monto del préstamo (MXN)', min_value=0.0, value=5000.0)\n",
        "    tasa_prestamo = st.number_input('Tasa de interés anual del préstamo (%)', min_value=0.0, max_value=100.0, value=10.0)\n",
        "    anios_prestamo = st.number_input('Años de préstamo', min_value=1, max_value=30, value=5)\n",
        "\n",
        "    # Cálculo del préstamo\n",
        "    num_pagos = anios_prestamo * 12  # Pagos mensuales\n",
        "    tasa_mensual = tasa_prestamo / 100 / 12\n",
        "    pago_mensual = monto_prestamo * tasa_mensual / (1 - (1 + tasa_mensual) ** -num_pagos)\n",
        "\n",
        "    st.write(f'Pago mensual: {pago_mensual:.2f} MXN')\n",
        "\n",
        "    # Amortización\n",
        "    amortizacion = []\n",
        "    saldo_pendiente = monto_prestamo\n",
        "    for i in range(num_pagos):\n",
        "        interes = saldo_pendiente * tasa_mensual\n",
        "        principal = pago_mensual - interes\n",
        "        saldo_pendiente -= principal\n",
        "        amortizacion.append([i+1, principal, interes, saldo_pendiente])\n",
        "\n",
        "    df_amortizacion = pd.DataFrame(amortizacion, columns=['Mes', 'Principal', 'Interés', 'Saldo Pendiente'])\n",
        "    st.write(df_amortizacion)\n",
        "\n",
        "# Sección de simulador de Afore\n",
        "elif simulador == 'Afore':\n",
        "    st.header('Simulador Afore')\n",
        "    rendimiento_promedio_siefore = 0.05  # 5% rendimiento anual\n",
        "    monto_inicial = st.number_input('Monto inicial (MXN)', min_value=0.0, value=50000.0)\n",
        "    años = st.number_input('Años hasta el retiro', min_value=1, max_value=50, value=20)\n",
        "\n",
        "    # Cálculo de Afore\n",
        "    monto_final_siefore = rendimiento_siefore(monto_inicial, rendimiento_promedio_siefore, años)\n",
        "    st.write(f'Monto final en Afore después de {años} años: {monto_final_siefore:.2f} MXN')\n",
        "\n",
        "# Sección de simulador bursátil\n",
        "elif simulador == 'Bursátil':\n",
        "    st.header('Simulador Bursátil: Comparativa de Acciones')\n",
        "\n",
        "    # Selección de empresas\n",
        "    empresas_bmv = ['AMX.MX', 'TLEVISACPO.MX', 'KOFUBL.MX', 'GFNORTEO.MX']\n",
        "    empresas_biva = ['CEMEX.MX', 'SOFTTEK.MX', 'ALSEA.MX', 'VITRO.MX']\n",
        "\n",
        "    inicio = '2019-01-01'\n",
        "    fin = '2024-01-01'\n",
        "\n",
        "    # Graficar acciones de BMV y BIVA\n",
        "    plt.figure(figsize=(14, 7))\n",
        "\n",
        "    for accion in empresas_bmv:\n",
        "        try:\n",
        "            datos_bmv = yf.download(accion, start=inicio, end=fin)['Close']\n",
        "            plt.plot(datos_bmv, label=f'BMV - {accion}')\n",
        "        except Exception as e:\n",
        "            st.error(f\"No se pudieron obtener los datos para {accion} de BMV: {e}\")\n",
        "\n",
        "    for accion in empresas_biva:\n",
        "        try:\n",
        "            datos_biva = yf.download(accion, start=inicio, end=fin)['Close']\n",
        "            plt.plot(datos_biva, label=f'BIVA - {accion}')\n",
        "        except Exception as e:\n",
        "            st.error(f\"No se pudieron obtener los datos para {accion} de BIVA: {e}\")\n",
        "\n",
        "    # Agregar título y etiquetas a la gráfica\n",
        "    plt.title('Comparativa de Acciones (BMV vs BIVA)')\n",
        "    plt.xlabel('Fecha')\n",
        "    plt.ylabel('Precio de Cierre (MXN)')\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "\n",
        "    # Mostrar la gráfica\n",
        "    st.pyplot(plt)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zqHSt51xKKXw",
        "outputId": "ddfbadf9-c876-4712-9f3a-867768029e45"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2024-11-25 02:37:06.642 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.645 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.647 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.649 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.651 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.653 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.655 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.656 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.658 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.659 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.660 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.664 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.665 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.666 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.669 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.671 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.672 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.673 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.675 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.676 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.677 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.678 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.679 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.680 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.682 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.683 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.684 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.685 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.686 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.687 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.688 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:37:06.689 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import streamlit as st\n",
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Funciones de cálculo\n",
        "def interes_compuesto(P, r, n, t):\n",
        "    M = P * (1 + r/n) ** (n * t)\n",
        "    return M\n",
        "\n",
        "def pago_prestamo(P, r, n):\n",
        "    A = P * (r * (1 + r) ** n) / ((1 + r) ** n - 1)\n",
        "    return A\n",
        "\n",
        "def rendimiento_siefore(monto, rendimiento_promedio, años):\n",
        "    monto_final = monto * (1 + rendimiento_promedio) ** años\n",
        "    return monto_final\n",
        "\n",
        "# Títulos de la app\n",
        "st.title('Simulador Financiero')\n",
        "\n",
        "# Menú de selección\n",
        "opcion = st.selectbox('Selecciona una opción', ['Simulador Bancario', 'Simulador Afore', 'Simulador Bursátil'])\n",
        "\n",
        "# Simulador Bancario\n",
        "if opcion == 'Simulador Bancario':\n",
        "    st.header('Simulador Bancario: Ahorro, Préstamo e Inversión')\n",
        "\n",
        "    # Sub-sección de ahorro\n",
        "    st.subheader('Simulador de Ahorro')\n",
        "    tasa_ahorro = st.number_input('Tasa de interés anual del ahorro (%)', min_value=0.0, max_value=100.0, value=5.0)\n",
        "    monto_inicial = st.number_input('Monto inicial (MXN)', min_value=0.0, value=1000.0)\n",
        "    anios_ahorro = st.number_input('Años de ahorro', min_value=1, max_value=50, value=5)\n",
        "\n",
        "    if st.button('Calcular Ahorro'):\n",
        "        ahorro_final = monto_inicial * (1 + tasa_ahorro/100) ** anios_ahorro\n",
        "        st.write(f'El monto final después de {anios_ahorro} años será: {ahorro_final:.2f} MXN')\n",
        "\n",
        "    # Sub-sección de préstamo\n",
        "    st.subheader('Simulador de Préstamo')\n",
        "    monto_prestamo = st.number_input('Monto del préstamo (MXN)', min_value=0.0, value=5000.0)\n",
        "    tasa_prestamo = st.number_input('Tasa de interés anual del préstamo (%)', min_value=0.0, max_value=100.0, value=10.0)\n",
        "    anios_prestamo = st.number_input('Años de préstamo', min_value=1, max_value=30, value=5)\n",
        "\n",
        "    if st.button('Calcular Préstamo'):\n",
        "        num_pagos = anios_prestamo * 12  # Pagos mensuales\n",
        "        tasa_mensual = tasa_prestamo / 100 / 12\n",
        "        pago_mensual = monto_prestamo * tasa_mensual / (1 - (1 + tasa_mensual) ** -num_pagos)\n",
        "        st.write(f'Pago mensual: {pago_mensual:.2f} MXN')\n",
        "\n",
        "    # Sub-sección de inversión en CETES\n",
        "    st.subheader('Simulador de Inversión en CETES')\n",
        "    monto_inversion = st.number_input('Monto de la inversión (MXN)', min_value=0.0, value=5000.0)\n",
        "    tasa_inversion = st.number_input('Tasa de inversión CETES anual (%)', min_value=0.0, max_value=100.0, value=7.0)\n",
        "    anios_inversion = st.number_input('Años de inversión', min_value=1, max_value=50, value=5)\n",
        "\n",
        "    if st.button('Calcular Inversión'):\n",
        "        inversion_final = monto_inversion * (1 + tasa_inversion/100) ** anios_inversion\n",
        "        st.write(f'El monto final después de {anios_inversion} años será: {inversion_final:.2f} MXN')\n",
        "\n",
        "# Simulador Afore\n",
        "elif opcion == 'Simulador Afore':\n",
        "    st.header('Simulador Afore y Siefore')\n",
        "\n",
        "    # Aquí incluirías el rendimiento promedio de las Siefores con datos reales\n",
        "    # Para fines de este ejemplo, usaremos valores ficticios de rendimiento\n",
        "    rendimiento_afores = {\n",
        "        'Afore 1': 6.5,\n",
        "        'Afore 2': 7.2,\n",
        "        'Afore 3': 5.8,\n",
        "    }\n",
        "\n",
        "    afores_opciones = st.selectbox('Selecciona tu Afore', list(rendimiento_afores.keys()))\n",
        "    st.write(f'La tasa de rendimiento promedio de {afores_opciones} es: {rendimiento_afores[afores_opciones]}%')\n",
        "\n",
        "    monto_inicial = st.number_input('Monto inicial (MXN)', min_value=0.0, value=10000.0)\n",
        "    anios_afores = st.number_input('Años hasta el retiro', min_value=1, max_value=50, value=20)\n",
        "\n",
        "    if st.button('Calcular Afore'):\n",
        "        monto_final_afores = rendimiento_siefore(monto_inicial, rendimiento_afores[afores_opciones]/100, anios_afores)\n",
        "        st.write(f'El monto final después de {anios_afores} años será: {monto_final_afores:.2f} MXN')\n",
        "\n",
        "# Simulador Bursátil\n",
        "elif opcion == 'Simulador Bursátil':\n",
        "    st.header('Simulador Bursátil: Comparativo de Acciones')\n",
        "\n",
        "    empresas_bmv = ['AMX.MX', 'TLEVISACPO.MX', 'KOFUBL.MX', 'GFNORTEO.MX']  # Empresas en la Bolsa Mexicana\n",
        "    empresas_biva = ['CEMEX.MX', 'SOFTTEK.MX', 'ALSEA.MX', 'VITRO.MX']  # Empresas en la Bolsa Institucional de Valores\n",
        "\n",
        "    # Fechas de análisis\n",
        "    inicio = '2019-01-01'\n",
        "    fin = '2024-01-01'\n",
        "\n",
        "    st.subheader('Comparativa de Acciones (BMV vs BIVA)')\n",
        "    plt.figure(figsize=(14, 7))\n",
        "\n",
        "    for accion in empresas_bmv:\n",
        "        try:\n",
        "            datos_bmv = yf.download(accion, start=inicio, end=fin)['Close']\n",
        "            plt.plot(datos_bmv, label=f'BMV - {accion}')\n",
        "        except Exception as e:\n",
        "            st.error(f\"No se pudieron obtener los datos para {accion} de BMV: {e}\")\n",
        "\n",
        "    for accion in empresas_biva:\n",
        "        try:\n",
        "            datos_biva = yf.download(accion, start=inicio, end=fin)['Close']\n",
        "            plt.plot(datos_biva, label=f'BIVA - {accion}')\n",
        "        except Exception as e:\n",
        "            st.error(f\"No se pudieron obtener los datos para {accion} de BIVA: {e}\")\n",
        "\n",
        "    plt.title('Comparativa de Acciones (BMV vs BIVA)')\n",
        "    plt.xlabel('Fecha')\n",
        "    plt.ylabel('Precio de Cierre (MXN)')\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    st.pyplot(plt)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ie_IdQNpNjPZ",
        "outputId": "938737a4-00e7-4552-902e-e34bd9502f58"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2024-11-25 02:46:06.955 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.957 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.960 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.963 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.965 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.967 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.970 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.971 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.974 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.978 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.980 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.981 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.983 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.984 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.985 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.986 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.988 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.989 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.990 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.991 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.992 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.994 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.995 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.996 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:06.999 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.000 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.001 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.002 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.003 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.005 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.006 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.007 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.008 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.009 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.011 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.012 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.013 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.014 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.015 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.016 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.017 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.019 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.020 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.021 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.022 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.023 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.024 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.026 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.027 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.028 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.029 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.030 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.031 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.032 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.034 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.035 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.036 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.037 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.038 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.039 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.040 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.041 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.043 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.044 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.045 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.046 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.047 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.048 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.049 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.051 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.052 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.053 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.054 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.055 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.057 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.058 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.059 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.060 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.061 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.062 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.063 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.064 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.065 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.066 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2024-11-25 02:46:07.068 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        }
      ]
    }
  ]
}
