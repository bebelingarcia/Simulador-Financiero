# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i-aGuK06Db-ri_7Khqsa2-iS5fjD5iJL
"""

#A) Simulador de Ahorro con Interés Compuesto (Pagaré Bancario)
# Función para calcular el monto final con interés compuesto
def interes_compuesto(P, r, n, t):
    M = P * (1 + r/n) ** (n * t)
    return M

# Ejemplo de uso:
P = 10000  # Monto inicial
r = 0.065  # Tasa de interés anual del 6.5%
n = 1  # Interés compuesto anual
t = 5  # 5 años

monto_final = interes_compuesto(P, r, n, t)
monto_final

# Función para calcular el pago mensual de un préstamo
def pago_prestamo(P, r, n):
    A = P * (r * (1 + r) ** n) / ((1 + r) ** n - 1)
    return A

# Ejemplo de uso:
P_prestamo = 20000  # Monto del préstamo
r_mensual = 0.065 / 12  # Tasa de interés mensual
n_pagos = 60  # 5 años de pagos mensuales

pago_mensual = pago_prestamo(P_prestamo, r_mensual, n_pagos)
pago_mensual

# Simulador de Afores y Siefore basado en rendimiento promedio de 5 años
def rendimiento_siefore(monto, rendimiento_promedio, años):
    monto_final = monto * (1 + rendimiento_promedio) ** años
    return monto_final

# Ejemplo de uso:
monto_inicial = 50000  # Monto inicial del usuario
rendimiento_promedio_siefore = 0.05  # 5% de rendimiento anual
años = 20  # 20 años hasta el retiro

monto_final_siefore = rendimiento_siefore(monto_inicial, rendimiento_promedio_siefore, años)
monto_final_siefore

import yfinance as yf
import matplotlib.pyplot as plt

# Empresas tecnológicas en BMV y BIVA
empresas_bmv = ['AMX.MX', 'TLEVISACPO.MX', 'KOFUBL.MX', 'GFNORTEO.MX']  # Empresas en la Bolsa Mexicana
empresas_biva = ['CEMEX.MX', 'SOFTTEK.MX', 'ALSEA.MX', 'VITRO.MX']  # Empresas en la Bolsa Institucional de Valores

# Fechas de análisis de los últimos 5 años
inicio = '2019-01-01'
fin = '2024-01-01'

# Graficar acciones de BMV y BIVA
plt.figure(figsize=(14, 7))

# Graficar acciones de BMV
for accion in empresas_bmv:
    try:
        datos_bmv = yf.download(accion, start=inicio, end=fin)['Close']
        plt.plot(datos_bmv, label=f'BMV - {accion}')
    except Exception as e:
        print(f"No se pudieron obtener los datos para {accion} de BMV: {e}")

# Graficar acciones de BIVA
for accion in empresas_biva:
    try:
        datos_biva = yf.download(accion, start=inicio, end=fin)['Close']
        plt.plot(datos_biva, label=f'BIVA - {accion}')
    except Exception as e:
        print(f"No se pudieron obtener los datos para {accion} de BIVA: {e}")

# Agregar título y etiquetas a la gráfica
plt.title('Comparativa de Acciones (BMV vs BIVA)')
plt.xlabel('Fecha')
plt.ylabel('Precio de Cierre (MXN)')
plt.legend()
plt.grid(True)

# Mostrar la gráfica
plt.show()

!pip install streamlit
!pip install pyngrok

!ngrok config add-authtoken 2pJ9cy08hFGITaH8d6Yj3WM7KhC_Jv1HZjcPThVQtjBw9BJ5

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Títulos de la app
st.title('Simulador Financiero')

# Sección 1: Simulador Bancario
st.header('Simulador Bancario: Ahorro, Préstamo e Inversión')

# Formulario de Ahorro
st.subheader('Simulador de Ahorro')
tasa_ahorro = st.number_input('Tasa de interés anual del ahorro (%)', min_value=0.0, max_value=100.0, value=5.0)
monto_inicial = st.number_input('Monto inicial (MXN)', min_value=0.0, value=1000.0)
anios_ahorro = st.number_input('Años de ahorro', min_value=1, max_value=50, value=5)

# Cálculo del ahorro compuesto
ahorro_final = monto_inicial * (1 + tasa_ahorro/100) ** anios_ahorro
st.write(f'El monto final después de {anios_ahorro} años será: {ahorro_final:.2f} MXN')

# Sección 2: Simulador de Préstamo
st.subheader('Simulador de Préstamo')
monto_prestamo = st.number_input('Monto del préstamo (MXN)', min_value=0.0, value=5000.0)
tasa_prestamo = st.number_input('Tasa de interés anual del préstamo (%)', min_value=0.0, max_value=100.0, value=10.0)
anios_prestamo = st.number_input('Años de préstamo', min_value=1, max_value=30, value=5)

# Cálculo de la amortización
num_pagos = anios_prestamo * 12  # Pagos mensuales
tasa_mensual = tasa_prestamo / 100 / 12
pago_mensual = monto_prestamo * tasa_mensual / (1 - (1 + tasa_mensual) ** -num_pagos)

# Mostrar detalle de pagos
st.write(f'Pago mensual: {pago_mensual:.2f} MXN')

# Amortización
amortizacion = []
saldo_pendiente = monto_prestamo
for i in range(num_pagos):
    interes = saldo_pendiente * tasa_mensual
    principal = pago_mensual - interes
    saldo_pendiente -= principal
    amortizacion.append([i+1, principal, interes, saldo_pendiente])

df_amortizacion = pd.DataFrame(amortizacion, columns=['Mes', 'Principal', 'Interés', 'Saldo Pendiente'])
st.write(df_amortizacion)

# Sección 3: Simulador de Inversión
st.subheader('Simulador de Inversión en CETES')
monto_inversion = st.number_input('Monto de la inversión (MXN)', min_value=0.0, value=5000.0)
tasa_inversion = st.number_input('Tasa de inversión CETES anual (%)', min_value=0.0, max_value=100.0, value=7.0)
anios_inversion = st.number_input('Años de inversión', min_value=1, max_value=50, value=5)

# Cálculo de inversión CETES
inversion_final = monto_inversion * (1 + tasa_inversion/100) ** anios_inversion
st.write(f'El monto final después de {anios_inversion} años será: {inversion_final:.2f} MXN')

# Sección 4: Simulador de Afore y Siefore
st.header('Simulador Afore y Siefore')

# Aquí incluirías el rendimiento promedio de las Siefores con datos reales
# Para fines de este ejemplo, usaremos valores ficticios de rendimiento
rendimiento_afores = {
    'Afore 1': 6.5,
    'Afore 2': 7.2,
    'Afore 3': 5.8,
}

# Mostrar la mejor opción de Afore
afores_opciones = st.selectbox('Selecciona tu Afore', list(rendimiento_afores.keys()))
st.write(f'La tasa de rendimiento promedio de {afores_opciones} es: {rendimiento_afores[afores_opciones]}%')

# Sección 5: Simulador Bursátil
st.header('Simulador Bursátil: Comparativo de Acciones')

# Selección de empresas para el comparativo
empresas_bmv = ['AMX.MX', 'TLEVISACPO.MX', 'KOFUBL.MX', 'GFNORTEO.MX']  # Empresas en la Bolsa Mexicana
empresas_biva = ['CEMEX.MX', 'SOFTTEK.MX', 'ALSEA.MX', 'VITRO.MX']  # Empresas en la Bolsa Institucional de Valores

# Fechas de análisis
inicio = '2019-01-01'
fin = '2024-01-01'

# Graficar acciones de BMV y BIVA
st.subheader('Comparativa de Acciones (BMV vs BIVA)')
plt.figure(figsize=(14, 7))

# Graficar acciones de BMV
for accion in empresas_bmv:
    try:
        datos_bmv = yf.download(accion, start=inicio, end=fin)['Close']
        plt.plot(datos_bmv, label=f'BMV - {accion}')
    except Exception as e:
        st.error(f"No se pudieron obtener los datos para {accion} de BMV: {e}")

# Graficar acciones de BIVA
for accion in empresas_biva:
    try:
        datos_biva = yf.download(accion, start=inicio, end=fin)['Close']
        plt.plot(datos_biva, label=f'BIVA - {accion}')
    except Exception as e:
        st.error(f"No se pudieron obtener los datos para {accion} de BIVA: {e}")

# Agregar título y etiquetas a la gráfica
plt.title('Comparativa de Acciones (BMV vs BIVA)')
plt.xlabel('Fecha')
plt.ylabel('Precio de Cierre (MXN)')
plt.legend()
plt.grid(True)

# Mostrar la gráfica
st.pyplot(plt)

!pip install streamlit
!pip install pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# 
# def mostrar_simulador():
#     st.title('Simulador Financiero')
# 
#     # Ejemplo de cómo crear la interfaz de usuario para el simulador
#     st.header('Simulador de Ahorro, Préstamo e Inversión')
#     st.write('Aquí puedes calcular el ahorro, préstamo e inversión utilizando tasas de referencia.')
# 
#     # Inputs para las simulaciones (esto es solo un ejemplo)
#     cantidad = st.number_input('Cantidad a invertir ($):', min_value=1, step=1)
#     tiempo = st.number_input('Tiempo (años):', min_value=1, step=1)
#     tasa = st.number_input('Tasa de interés anual (%):', min_value=0.1, max_value=100.0, step=0.1)
# 
#     if st.button('Calcular'):
#         st.write(f"Tu inversión de {cantidad} durante {tiempo} años con una tasa de {tasa}% te dará un rendimiento de...")
# 
# if __name__ == "__main__":
#     mostrar_simulador()

from pyngrok import ngrok

# Conecta el túnel HTTP para Streamlit en el puerto 8501
public_url = ngrok.connect(8501)
print(f"Tu aplicación Streamlit está disponible en: {public_url}")

!streamlit run app.py &>/content/logs.txt &

!cat /content/logs.txt

print(f"Tu aplicación Streamlit está disponible en: {public_url}")

import streamlit as st
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt

# Funciones de cálculo
def interes_compuesto(P, r, n, t):
    return P * (1 + r/n) ** (n * t)

def pago_prestamo(P, r, n):
    return P * (r * (1 + r) ** n) / ((1 + r) ** n - 1)

def rendimiento_siefore(monto, rendimiento_promedio, años):
    return monto * (1 + rendimiento_promedio) ** años

# Título de la app
st.title('Simulador Financiero')

# Menú de selección de tipo de simulador
simulador = st.selectbox('Selecciona el tipo de simulador', ['Ahorro', 'Préstamo', 'Afore', 'Bursátil'])

# Sección de simulador de ahorro
if simulador == 'Ahorro':
    st.header('Simulador de Ahorro')
    monto_inicial = st.number_input('Monto inicial (MXN)', min_value=0.0, value=1000.0)
    tasa_ahorro = st.number_input('Tasa de interés anual (%)', min_value=0.0, max_value=100.0, value=5.0)
    anios_ahorro = st.number_input('Años de ahorro', min_value=1, max_value=50, value=5)

    # Cálculo del ahorro
    ahorro_final = monto_inicial * (1 + tasa_ahorro/100) ** anios_ahorro
    st.write(f'El monto final después de {anios_ahorro} años será: {ahorro_final:.2f} MXN')

# Sección de simulador de préstamo
elif simulador == 'Préstamo':
    st.header('Simulador de Préstamo')
    monto_prestamo = st.number_input('Monto del préstamo (MXN)', min_value=0.0, value=5000.0)
    tasa_prestamo = st.number_input('Tasa de interés anual del préstamo (%)', min_value=0.0, max_value=100.0, value=10.0)
    anios_prestamo = st.number_input('Años de préstamo', min_value=1, max_value=30, value=5)

    # Cálculo del préstamo
    num_pagos = anios_prestamo * 12  # Pagos mensuales
    tasa_mensual = tasa_prestamo / 100 / 12
    pago_mensual = monto_prestamo * tasa_mensual / (1 - (1 + tasa_mensual) ** -num_pagos)

    st.write(f'Pago mensual: {pago_mensual:.2f} MXN')

    # Amortización
    amortizacion = []
    saldo_pendiente = monto_prestamo
    for i in range(num_pagos):
        interes = saldo_pendiente * tasa_mensual
        principal = pago_mensual - interes
        saldo_pendiente -= principal
        amortizacion.append([i+1, principal, interes, saldo_pendiente])

    df_amortizacion = pd.DataFrame(amortizacion, columns=['Mes', 'Principal', 'Interés', 'Saldo Pendiente'])
    st.write(df_amortizacion)

# Sección de simulador de Afore
elif simulador == 'Afore':
    st.header('Simulador Afore')
    rendimiento_promedio_siefore = 0.05  # 5% rendimiento anual
    monto_inicial = st.number_input('Monto inicial (MXN)', min_value=0.0, value=50000.0)
    años = st.number_input('Años hasta el retiro', min_value=1, max_value=50, value=20)

    # Cálculo de Afore
    monto_final_siefore = rendimiento_siefore(monto_inicial, rendimiento_promedio_siefore, años)
    st.write(f'Monto final en Afore después de {años} años: {monto_final_siefore:.2f} MXN')

# Sección de simulador bursátil
elif simulador == 'Bursátil':
    st.header('Simulador Bursátil: Comparativa de Acciones')

    # Selección de empresas
    empresas_bmv = ['AMX.MX', 'TLEVISACPO.MX', 'KOFUBL.MX', 'GFNORTEO.MX']
    empresas_biva = ['CEMEX.MX', 'SOFTTEK.MX', 'ALSEA.MX', 'VITRO.MX']

    inicio = '2019-01-01'
    fin = '2024-01-01'

    # Graficar acciones de BMV y BIVA
    plt.figure(figsize=(14, 7))

    for accion in empresas_bmv:
        try:
            datos_bmv = yf.download(accion, start=inicio, end=fin)['Close']
            plt.plot(datos_bmv, label=f'BMV - {accion}')
        except Exception as e:
            st.error(f"No se pudieron obtener los datos para {accion} de BMV: {e}")

    for accion in empresas_biva:
        try:
            datos_biva = yf.download(accion, start=inicio, end=fin)['Close']
            plt.plot(datos_biva, label=f'BIVA - {accion}')
        except Exception as e:
            st.error(f"No se pudieron obtener los datos para {accion} de BIVA: {e}")

    # Agregar título y etiquetas a la gráfica
    plt.title('Comparativa de Acciones (BMV vs BIVA)')
    plt.xlabel('Fecha')
    plt.ylabel('Precio de Cierre (MXN)')
    plt.legend()
    plt.grid(True)

    # Mostrar la gráfica
    st.pyplot(plt)